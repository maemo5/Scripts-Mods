This tool formats most of the data required for dynamic missions based on what is present in your mission. 
This include the layout of buildings, loot crates, markers, static weapons, and garrisons in buildings.
I recommend that you lay out dynamically spawned missions in the virtual reality map which minimizes confounding influences.

A minimal mission would include:
    A marker.
    A way to define the mission center, which is a reference point relative to which everything is spawned.
    The mission system will spawn AI, loot chests, emplaced weapons, vehicles and aircraft according to the defaults for the mission difficulty.

The basic blckeagls missions have a bit more defined, usually some buildings to provide cover and make things more interesting.

Now, you can add more detail including defining where infantry and statics spawn, where the one or more loot crates spawn, where vehicle patrols spawn and so forth.
    To do this just place the representative objects where you want the mission to spawn them and the script should do the rest.
    For infantry patrols, put one unit where you want the group to spawn.
    Note:  uniforms, weapons and other AI gear are not captured. You can however define _uniforms, _weapons and other AI gear for that mission. see the template and default2 missions for examples.

You can also have infantry and/or static weapons garrison buildings using either of two approaches.
    1. place an object fo type garrisonMarkerObject inside the building you want to garrison. 
       I use a 100 cm sphere which is the default because it is easy to see and not used for much else.
       The script will ensure that this building is identified for a garrison which will be spawned at the Arma pre-defined buildingPositions.
    
    2. Manualy place statics and units inside buildings where you want them to spawn. 
        Infantry will change position (crouch, prone, stand) and turn but will not move which prevents their normal behavior to leave the buliding and look for players.
        The position of statics (e.g., HMG, GMG) will be recorded accurately. 
        By default, the script looks for arrows. this is so that if you pull mission data as a player the locations are recorded acccurately (more on that below).
        You can of course just place the units where you want them. 
        Regardless, be sure that unitMarkerObject is set to the classname of the object you use to demarcate the position of infantry units.
        If you do use AI units to designate positions for your infantry, be sure to pull the data while in the editor rather than when playing the mission (see below).

    3. You are now almost ready to pull the mission data. 
        I recommend that you use a road cone with a flashing light to define the mission center.
        This is the approach I have taken for all blckeagles missions to date.
        You could also use a loot crate.
        The actual mission center will be offset 3 meters from this position for technical reasons.

Once all that is done you are ready to pull the mission information. 
To do that, from the EDEN Editor, 
    1. go to tools\debug console.
    2. type execVM "pullDynamicMission.sqf"; in the box.
    3. hit Local exec
    4. hit Esc
    5. The script should run as indicated by text appearing in the lower left corner of your screen.
    6. When the text stops being updated, alt-tab out to your editor and paste the clipboard into it.
    7. You can now copy/past from that output into the relevant sections of the dynamic mission template,
       after making a copy of course.


